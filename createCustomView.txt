2/25/2022

*Custom Views are basically required when you have a
special requirement from a view which is not available in android SDK. *

Step 1. Create a subclass
public class CustomView extends View 

Step 2. Define Custom Attributes
<?xml version="1.0" encoding="utf-8"?>
<!--Define a custom attribute

    To add a built-in View to your user interface,
    you specify it in an XML element and control its
    appearance and behavior with element attributes.
-->
<resources>
    <declare-styleable name="CustomView">
        <attr name="square_color" format="color"/>
            <attr name="square_size" format="dimension"/>
    </declare-styleable>
</resources>

Step 3. Apply Custom Attributes

           When a view is created from an XML layout,
           all of the attributes in the XML tag
           are read from the resource bundle and
           passed into the view's constructor as an
           AttributeSet. */
        TypedArray ta = getContext().obtainStyledAttributes(set, R.styleable.CustomView);

        mSquareColor = ta.getColor(R.styleable.CustomView_square_color, Color.BLUE);

        mPaintSquare.setColor(mSquareColor);
           ta.recycle();

Step 4. Add Properties and Events
postInvalidate();

Step 5. Override onDraw()

    @Override
    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);

        mRectSquare.left = 50;
        mRectSquare.top= 50;
        mRectSquare.right = mRectSquare.left + SQUARE_SIZE;
        mRectSquare.bottom = mRectSquare.top + SQUARE_SIZE;

        canvas.drawRect(mRectSquare, mPaintSquare);

        if(mCircleX == 0f || mCircleY == 0f)
        {
            mCircleX = getWidth()/2;
            mCircleY = getHeight()/2;
        }

        canvas.drawCircle(mCircleX,mCircleY, mCircleRadius, mPaintCircle);
    } 

Step 6.Create Drawing Objects

   private void init(@Nullable AttributeSet set)
    {
        mRectSquare = new Rect();

        /* Create Drawing Objects

           For instance, Canvas provides a method to draw a line,
           while Paint provides methods to define that line's
           color. Canvas has a method to draw a rectangle,
           while Paint defines whether to fill that rectangle
           with a color or leave it empty. Simply put, Canvas
           defines shapes that you can draw on the screen, while
           Paint defines the color, style, font, and so forth of
           each shape you draw.*/

        mPaintSquare = new Paint(Paint.ANTI_ALIAS_FLAG);

        mPaintCircle = new Paint();
        mPaintSquare.setAntiAlias(true);
        mPaintCircle.setColor(Color.parseColor("#00ccff"));

        if(set == null)
            return;

        /*Apply Custom Attributes

           When a view is created from an XML layout,
           all of the attributes in the XML tag
           are read from the resource bundle and
           passed into the view's constructor as an
           AttributeSet. */
        TypedArray ta = getContext().obtainStyledAttributes(set, R.styleable.CustomView);

        mSquareColor = ta.getColor(R.styleable.CustomView_square_color, Color.BLUE);

        mPaintSquare.setColor(mSquareColor);
           ta.recycle();
    }

Step 7. Handle layout events
   @Override
    public boolean onTouchEvent(MotionEvent event) {
        boolean value = super.onTouchEvent(event);

        //Handle Layout Events
        switch (event.getAction())
        {
            case MotionEvent.ACTION_DOWN:{
                float x =  event.getX();
                float y = event.getY();

                if(mRectSquare.left < x && mRectSquare.right > x)
                    if(mRectSquare.top < y && mRectSquare.bottom > y)
                    {
                        mCircleRadius += 10f;
                        postInvalidate();
                    }

                return true;
            }

            case MotionEvent.ACTION_MOVE:{

                float x =  event.getX();
                float y = event.getY();

                double dx = Math.pow(x - mCircleX, 2);
                double dy = Math.pow(y - mCircleY, 2);

                if(dx + dy < Math.pow(mCircleRadius, 2))
                {
                    mCircleX = x;
                    mCircleY = y;

                    postInvalidate();

                    return true;
                }

                return value;
            }
        }
        return  value;
    }
